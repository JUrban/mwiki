#!/usr/bin/perl -w

use strict;
use warnings;
use File::Temp qw/ tempfile tempdir /;
use Cwd;
use Carp;

use Mizar;

# Compute list of mizar files that belong to the index (i.e., the
# mizar files that are about to be committed).

# We might want to use a perl package for git later on
my $git_dir;
if (defined ($ENV{"GIT_DIR"})) {
  if (-d $ENV{"GIT_DIR"}) {
    $git_dir = $ENV{"GIT_DIR"};
  } else {
    croak ("The GIT_DIR environment variable is set, but it's not a directory")
  }
} else {
  $git_dir = getcwd ();
}

# git diff-index will give a list of changed files.  We compare the
# index to HEAD, the most recent commit known to be valid/coherent.
# The actual file name is the second field of the line (where the
# field separator is tab), hence the first call to "cut -f 2".  The
# second cut gets rid of the initial "mml/" in filenames like
# "mml/polyform.miz".  The last cut gives us "polyform" from
# "polyform.miz".
my @changed = `git --git-dir=$git_dir diff-index --cached HEAD | cut -f 2 | grep '\.miz\$' | cut -d '/' -f 2 | cut -d '.' -f 1`;

my $mizfiles = Mizar::get_MIZFILES ();

my $tempdir = tempdir (CLEANUP => 0);
my $currdir = getcwd ();
my $num_changed = scalar (@changed);
print ("It looks like I have $num_changed to look at\n");

print ("Copying all these to $tempdir\n");
foreach (@changed) {
  chomp;
  system ("cp", "$currdir/mml/$_.miz", "$tempdir");
}
print ("copying done.\n");

my @mml_changed = ();
my @non_mml_changed = ();

sub separate_mml_from_non_mml {
  foreach my $edited (@changed) {
    chomp ($edited);
    my ($name, $path, $extension) = fileparse ($edited);
    if ($extension eq ".miz") {
      if (Mizar::belongs_to_mml ($name)) {
	push (@mml_changed, $edited);
      } else {
	push (@non_mml_changed, $edited);
      }
    }
  }
}

separate_mml_from_non_mml ();

print ("Verifying modified mizar files...\n");

my @killers = ();
my @bad_guys = ();
foreach (@changed) {
  chomp;
  my $verifier_result;
  Mizar::set_verifier_path ("/home/mizarw/mwiki/bin/verifier");
  $verifier_result = Mizar::run_verifier ("$_.miz");

  if ($verifier_result == -1) {
    push (@killers, $_);
  }

  if ($verifier_result == -2) {
    push (@bad_guys, $_);
  }
}

print ("I tried to verify your changes.  Let's see whether that worked out.\n");

foreach (@killers) {
  print ("KILLER: $_ killed the verifier.");
}

print ("If you like, check out $tempdir to see the generated auxiliary files\n");

my $bad_length = scalar (@bad_guys);
if ($bad_length == 0) {
  exit 0;
} else {
  print ("Sorry, there were some problems with the texts that you intended to commit.\n");
  print ("The following articles generated errors when being run on the verifier:\n");
  foreach (@bad_guys) {
    print ("* $_\n");
  }
  print ("Sorry, I can't let you commit these files.\n");
  exit 1;
}
