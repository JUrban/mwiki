#!/usr/bin/perl -w

use strict;
use warnings;
use File::Temp qw/ tempfile tempdir /;
use File::Copy;
use File::Basename;
use Cwd;
use Carp;

use lib '.perl';

use mizar;

# Compute list of mizar files that belong to the index (i.e., the
# mizar files that are about to be committed). git diff-index will
# give a list of changed files.  We compare the index to HEAD, the
# most recent commit known to be valid/coherent.  The actual file name
# is the second field of the line (where the field separator is tab),
# hence the first call to "cut -f 2".  The last cut gives us
# "polyform" from "polyform.miz".
my @miz_changed 
  = `git diff-index --cached HEAD | cut -f 2 | grep '\.miz\$'`;
my @non_miz_changed 
  = `git diff-index --cached HEAD | cut -f 2 | grep --invert-match '\.miz\$'`;

my @mml_changed = ();
my @non_mml_changed = ();

my %dependencies = ();
my $cwd = getcwd ();
my $dependency_makefile = $cwd . '/' . 'mml' . '/' . 'Makefile';
my $master_makefile = $cwd . '/' . 'Makefile';

warn ("HEre's miz_changed: @miz_changed");

sub separate_mml_from_non_mml {
  foreach my $edited (@miz_changed) {
    chomp ($edited);
    my ($name, $path, $extension) = fileparse ($edited, qr/\.[^.]+/);
    if ($path eq "mml/") {
      if (mizar::belongs_to_mml ($name)) {
	warn ("Article $name belongs to the MML");
	push (@mml_changed, $name);
      } else {
	warn ("Article $name does not belong to the MML");
	push (@non_mml_changed, $name);
      }
    } else {
      carp ("You're committing a mizar file ($edited) outside the MML subdirectory; we don'handle this case yet");
    }
  }
}

separate_mml_from_non_mml ();

my @new_articles = (@mml_changed, @non_mml_changed);

my $temp_mizfiles = mizar::full_MIZFILES_in_tempdir ();
mizar::set_MIZFILES ($temp_mizfiles);
my $temp_mml = $temp_mizfiles . "/" . "mml";
foreach my $changed (@mml_changed) {
  my $changed_path = "mml/$changed.miz";
  my $temp_path = $temp_mml . "/" . "$changed.miz";
  # First, remove the old version
  my $unlink_status = unlink $temp_path
    or croak ("Something went wrong when removing $temp_path: $!");
  unless ($unlink_status == 1) {
    croak ("We tried to remove $temp_path; we apparently didn't!");
  }
  copy ($changed_path, $temp_path)
    or croak ("Something went wrong copying $changed_path to $temp_path: $!");
}

# XSL directory
mkdir ($temp_mizfiles . "/" . "xsl");
`cp -R $cwd/xsl $temp_mizfiles`;

my $admissible_commit = 0;

# Call the dependency makefile on the new targets

my $make_deps_out = $temp_mml . "/" . "make-deps-out";
my $make_deps_err = $temp_mml . "/" . "make-deps-err";
warn ("About to call make thus:");
warn ("make -f $dependency_makefile deps");
chdir ($temp_mml);
`make -f $dependency_makefile deps > $make_deps_out 2> $make_deps_err`;
my $dep_make_exit_status = ($? >> 8);

# Now try to verify the new articles

my $make_xml_out = $temp_mizfiles . "/" . "make-xml-out";
my $make_xml_err = $temp_mizfiles . "/" . "make-xml-err";
chdir ($temp_mizfiles);
my $make_cmd = "make -f $master_makefile xmlvrfs > $make_xml_out 2> $make_xml_err";
warn ("About to execute make with the command\n$make_cmd\n...");
warn ("MIZFILES is set to $temp_mizfiles");
my $make_result = `MIZFILES=$temp_mizfiles $make_cmd`;
warn ("result of make: $make_result\n");
if (defined ($make_result)) {
  $admissible_commit = 1;
} else {
  $admissible_commit = 0;
}

if ($admissible_commit) {
  print ("Your changes are admissible\n");
} else {
  print ("Your changes are inadmissible\n");
}

exit ($admissible_commit);
