; -*- mode: org; -*-
#+SEQ_TODO: TODO IN-PROGRESS | DONE
#+SEQ_TODO: BUG | FIXED
#+TAGS: jesse josef
#+STARTUP: overview
* TODO A full-featured suite for saving one's own mizar notebooks
** TODO Consider using weblocks for this
   I've had some experience with the hunchentoot web engine
   (http://weitz.de/hunchentoot/); weblocks is a very cool extension
   of hunchentoot that could make this process very slick and full
   featured. We could be the github of the formal mathematics world :->

   http://weblocks.viridian-project.de/
* DONE Set up some perl tests
  As things stand now, I am testing this code by doing a lot of manual
  changes.  Setting up perl tests would help to make this process more
  intelligent, and quicker, too.
* DONE Generate a JFM-like front page
  The post-commit hook seems like the right place to do that.
* TODO Create the "stable" branch in the repo
  Periodically commit there the official releases, possibly import
  there couple of previos versions. Present it in HTML in another
  sandbox.  This could be a script (similar to the setup_repo script)
  that unpacks the mml .tar distro and commits it to "stable". Could
  be also a cron job, checking the mizar download page periodically.
* DONE Add the check for @proof in pre-commit
  We should forbid theorems with @proof at the master repo. Check it
  using the XML created by article - there should be no element "SkippedProof" 
* DONE Add better error messages
  CLOSED: [2010-03-19 Fri 10:53]
  When we do not commit, show people a log of the pre-commit check,
  and improve the pre-commit/make to tell the errors
* TODO Use the gitweb improvements
  like in http://repo.or.cz/w/CellLocator.git - looks like
  gitweb can be configured nicely to have additional info for projects -
  look into the Girocco gitweb directory for the setup
* TODO investigate using ScriptLog directive for logging the cgi I/O
* DONE Better stage/unstage logic in pre-receive 
  CLOSED: [2010-04-16 Fri 19:59]
  (and possibly st similar for pre-commit)
  The current way of doing this is bad when the commit/add fails:
  When we modify a file, and call git add, its current content is staged.
  When the commit fails, and we copy over it the old version, the
  modified version is still staged - this is bad. We need to undo
  the staging too. Perhaps there is a pre-staging hook? Or it is
  easy to undo the last staging?

  Here is the answer: http://learn.github.com/p/undoing.html
  we can use:
  git reset HEAD
  and
  git checkout --
  to unstage and unmodify
* TODO Show some kind of "live" output/progress indicator
  It can take a non-trivial amount of time for verification and
  HTMLization to run.  It would be good if we provided some progress
  indicator output, especially for those users who will be doing anony
  ous pushes.
* TODO Log the results of anonymous pushes to the system log.
  We should keep track of what's going on, both for web edits and
  anonymous git pushes.
* DONE Make HTML valid
  CLOSED: [2010-04-16 Fri 19:59]
  If we want this to be web scrapable, etc., then it should at least
  be valid.  The frontend index.html, for example, is really bad
  (specifies HTML 2.0 -- from 1995), and in any case is invalid:

  http://validator.w3.org/check?uri=http%3A%2F%2Fmws.cs.ru.nl%2F%7Emizarw%2Fmw%2Findex.html&charset=%28detect+automatically%29&doctype=Inline&group=0

  The HTML generated from the verifier XML is likewise invalid.  For
  example:
  
  http://validator.w3.org/check?uri=http%3A%2F%2Fmws.cs.ru.nl%2F%7Emizarw%2Fmw%2Fabcmiz_0.html&charset=%28detect+automatically%29&doctype=Inline&group=0&user-agent=W3C_Validator%2F1.767

  And it uses the HTML 4.01 Transitional spec.  We can do better than
  this.  We should aim for XHTML.  (More ambitiously, there are also
  some features of HTML 5 tht we might want to investigate using, such
  as offline caching.)
* TODO Create the "frontend" repo(s), for anonymous pushes
  As a post-receive hook, changed .miz (different from master) files
  get copied to our master repo, and commit is attempted there. The
  result is announced to the pusher by the post-receive
  hook. Typically, pushers get their own branch, and can decide to
  work with particular branch. The frontend shouls probably track the
  master and stable. Take from ikiwiki its protection against evil
  pushers.


  Here is how I am thinking about doing this.  We have a user, git, on
  the server that actually does the git commands on the server.  The
  question then is how to ensure that anonymous users are able to do
  this.  OK, they use the git protocol on the server.  They suggest
  that this is sufficient.  Anonymous users can then push.  But that
  conflicts, I think, with the git book discussion of the git method.
  OK, maybe this could work.  We've got a git user on the server, and
  people push to a certain directory.  Seems fine.  We just need to
  publish the exact file name to which users push their changes, e.g.:

  git@mws.cs.ru.nl:/home/git/mizarwiki

  That should be fine.  I suppose in principle that's already
  available and we can test it.  We just need an update hook.
  (ikiwiki uses a pre-receive hook.  I'm not sure I understand the
  difference between these two approaches.)  The ikiwiki documentation
  suggests that some more is needed.  In any case, both the ikiwiki
  documentation and the pro git book say that the server repo to which
  people are allowed to push needs to be a bare repo.  But we don't
  have any bare repos yet.  We just have the central repo.

  I need some way to test this on my machine.  We need some sane
  mechanism for installing this software. I'd like to test it both on
  my MacBook Pro and my new little eeepc, as well as my Portuguese
  server.

* TODO Track the master and stable on GitHub.
  Just by post-commit hooks probably.
* TODO Think if we really need the frontend repo
  We might be fine with just one, OTOH, ikiwiki also uses two repos,
  and we would have to investigate the pre-receive hook for handling
  bad pushes, and not be able to save incorrect work. This is what
  frontend might be useful for.
* DONE Create an "edit" button, and the correspondin cgi
  CLOSED: [2010-04-16 Fri 19:59]
  like in ikiwiki. This gets directly commited in the master, and on
  success, the page is updated. Otherwise, errors are shown to the
  user. We might save his work in some branch or frontend, and let him
  fix his bugs there. This means that we might want to publish the
  list of current branches.
* TODO Create the edit button for sections
  initially for theorems. If just the proof gets edited, don't
  reverify the other articles, just this one. Create dependencies
  among theorems, and try to have the re-verification finer.
* TODO Investigate using SCons or Waf instead of make
  See http://www.scons.org/doc/0.98.5/HTML/scons-user/c779.html . With
  SCons, we can specify the fucntion for decideing if a file has
  changed or not. It can be MD5, but also our own function, saying
  e.g. that the properly stripped XML has not changed. SCons will not
  rebuild after this.
* TODO Create the "clone" button
  and give people a way how to clone things and push to the frontend
* DONE Implement proper locking, of the repos and sandboxes
  CLOSED: [2010-04-16 Fri 20:00]
  Especially wrt to the online editing, because pushes and commits to
  frontends and master probably can rely on git's locking.
* TODO Think of handling mutually incompatible, but correct, developments
  This would be probably multiple branches on the master repo, and
  multiple sandboxes. This is not what Wikipedia allows, but Linux
  does.
* TODO Plug-in the parallelizer
  for faster verification and htmlization of one or two articles only.
* TODO Plug-in more mizar utilities
  can be used as critics of the code
* TODO Plug-in the ATP and AI stuff, and MML Query, and FM
  from my recent atp paper, Grzegorz's developments, etc
* TODO Plug-in the Wikipedia tagging
  provide some suitable metadata and syntax in .miz, provide
  presentation alongside Wikipedia
* TODO Do this for Coq and Isabelle if they give us the tools
  When things are reasonably polished, working fast, and useful at
  least for one PA, and others get motivated to actually give us the
  corresponding tools and work with us on their plugging-in and
  use. Without good testers and developers, it is not going to work.
* DONE Factor out the CSS from the generated article HTML to a separate file
* DONE Don't use SkippedProofs, but rather "@proof"		      :jesse:
  CLOSED: [2010-04-16 Fri 20:12]
  The "@proof" should be preceded by whitespace, or at the beginning of a line,
  and not in the context of a comment.
* DONE Index file: what should it be called?
  CLOSED: [2010-04-16 Fri 20:01]
  The idea is to not restrict the names of articles submitted to the
  wiki.  Since "index.miz" is a valid mizar name, which would generate
  "index.html", we want to avoid "index.html" as the name of our
  index.  Josef proposed "00INDEX.html", which has the advantage that
  in a directory listing it shows up at the top.  But I think that's a
  valid article name, too.  I propose "frontpage.html".  The basename
  has nine characters, which makes it an invalid mizar article name.
  But this has the advantage that it will not show up at the top of a
  directory listing.  What about "0000index.html"?  Nine characters,
  definitely at the top.
* TODO Make sure we properly escape (X)HTML characters in mwiki.cgi   :jesse:
  Escaping ampersands is just the begining.
