#!/usr/bin/perl -w

use strict;
use warnings;

# There should be exactly one line given to this script by git.
my $first_line = <STDIN>;
my $second_line = <STDIN>;

unless (defined $first_line) {
  print 'Standard input was empty!  How is that possible?';
  print 'Uh oh: standard input was empty!!';
  exit 1;
}

if (defined $second_line) {
  print 'We currently handle pushes to only one refspec (namely, the master branch)';
  exit 1;
}

# Ensure that the line we've received has the right form, as specified
# in the git man page githooks:
#
# <old-value> SP <new-value> SP <ref-name> LF
chomp $first_line;
my ($old_sha1, $new_sha1, $refspec) = split (/\ /, $first_line);
unless (defined $old_sha1 && defined $new_sha1 && defined $refspec) {
  print 'The given line does not match the format specified in the githooks(5) man page';
  exit 1;
}

# Check for sane SHA1 values
unless ($old_sha1 =~ /[a-z0-9]{40}/ && $new_sha1 =~ /[a-z0-9]{40}/) {
  print 'Suspicious SHA1 values given';
  exit 1;
}

# Ensure that the new SHA1 and the old SHA1 are the names of commit
# objects.
my $old_sha1_type = `git cat-file -t $old_sha1`;
my $new_sha1_type = `git cat-file -t $new_sha1`;
unless ($old_sha1_type eq 'commit') {
  print "A non-commit object with the name,\n";
  print "  $old_sha1\n";
  print "is being pushed; unable to proceed.\n";
  exit 1;
}
unless ($new_sha1_type eq 'commit') {
  print "A non-commit object with the name,\n";
  print "  $new_sha1\n";
  print "is being pushed; unable to proceed.\n";
  exit 1;
}

# We permit pushes only to the refpsec "refs/heads/master".
unless ($refspec eq 'refs/heads/master') {
  print 'We permit pushes only to the master branch';
  exit 1;
}

# Now that we know that the SHA1 object names being pushed are
# commits, find their associated trees
my $old_commit_tree = `git cat-file commit $old_sha1 | grep ^tree | cut -f 2 -d ' '`;
my $new_commit_tree = `git cat-file commit $new_sha1 | grep ^tree | cut -f 2 -d ' '`;

# Ensure that no non-mizar code is being pushed
my @non_miz_files = `git show --pretty --name-only $new_sha1 | grep --invert-match ".miz"`;
unless (-z @non_miz_files) {
  print 'We do not currently support pushing non-.miz files to our repository';
  exit 1;
}

# Ensure that all .miz files satisfy these conditions:
#
# - their size is less than, say, one megabyte;
# - they have mode 644;
# - they are under the mml subdirectory
my @miz_files = `git show --pretty --name-only $new_sha1 | grep ".miz"`;
for my $miz_file (@miz_files) {
  chomp $miz_file;
  my $miz_file_size = `git cat-file -s $new_sha1:$miz_file`;
  unless ($miz_file_size < 1000000) {
    print "Suspicious: the .miz file $miz_file is bigger than one megabyte";
    exit 1;
  }
  my $mode = `git ls-tree $new_commit_tree | grep $miz_file | cut -f 1 -d ' '`;
  unless ($mode eq '10644') {
    print 'Suspicious: a .miz file is being commited without mode 644';
  }
  my $path = `git ls-tree $new_commit_tree | grep $miz_file | cut -f 2`;
  unless ($path eq "mml/$miz_file") {
    print 'Suspcious: .miz file is not under the mml subdirectory';
    exit 1;
  }
}

warn "Somehow we escaped alive!";

exit 0;
