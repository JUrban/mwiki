# -*- mode: makefile; -*-

# An install script, as Makefile, to set up the initial installation
# of the mizar wiki.  We will probably run this only a handful of
# times.

# The following should be present in the environment or as argments to
# `make':
#
# - REPOS_BASE: the root directory where our repos -- the backend and
#   the bare frontend -- will be stored
#
# - MIZFILES: the root directory of a mizar installation.  It should
#   contain data files mml.lar etc, the prel subdirectory, and the mml
#   subdirectory.
#
# - XSL4MIZ: root directory of Josef Urban's xsl4mizar code.
#
# One can optionally specify:
#
# - MIZBIN: default: $(MIZFILES)/bin.  The directory where the mizar
#   binaries are held
#
# - MAKEJOBS: default 1.  The degree of parallelization used by make
#   when computing the initial HTML-ized presentation of the MML
#
# - ALLOWSKIPPEDPROOFS: default 1.  Allow @proof (proof skipping) in
#   articles.
#
# - NUM_ARTICLES: default 10.  The length of the initial segment of
#   mml.lar (taken from MIZFILES).  Set it to a big value to ensure
#   that the entire current MML is used; set it to a low-value for
#   debugging purposes.
#
# - MWUSER: default "mwiki".  The name of the unix user to add that
#   will preside over the whole mess.
#
# - INSTALL: default /usr/bin/install.  If this is GNU install, then
#   no need to adjust.  (On Mac OX X, /usr/bin/install is not GNU
#   install, so I need to set this value to "ginstall".)
#
# - HEAD: default /usr/bin/head.  See description of INSTALL variable.

# BTRFS - not used yet, but keeping the btrfs partition

# adding a new user: adduser tstmw; ssh tstmw@localhost; ssh-keygen -q; 
# git config --global user.email "tstmw@none.none"
# git config --global user.name "tstmw"
# mkdir $(BTRFS)/tstmw && chown tstmw:tstmw $(BTRFS)/tstmw && ln -s /mnt/btr1/tstmw clones


MWUSER_HOME=/home/$(MWUSER)
SCRATCH_BASE=$(MWUSER_HOME)/scratch
REPOS_BASE=$(MWUSER_HOME)/clones
BARE_REPOS=$(MWUSER_HOME)/repositories
MWADMIN_DIR=$(MWUSER_HOME)/mwadmin
REPO_NAME=mwiki
PUBLIC_REPO_NAME=$(REPO_NAME)/public
REPO_DIR_INDEX=00INDEX.html
PUBLIC_REPO=$(REPOS_BASE)/public
PUBLIC_SANDBOX=$(PUBLIC_REPO)-sandbox
BARE_PUBLIC_REPO=$(BARE_REPOS)/public.git
REPOBIN=$(PUBLIC_REPO)/bin
MIZBIN=$(MIZFILES)/bin
MAKEJOBS=1
ALLOWSKIPPEDPROOFS=1
SHEETS=addabsrefs miz evl2dep evl2dep1
GITWEB_ROOT=/var/cache/git
NUM_ARTICLES=10
HEAD=/usr/bin/head
INSTALL=/usr/bin/install
INITIAL_SEGMENT=$(shell $(HEAD) -n $(NUM_ARTICLES) $(MIZFILES)/mml.lar)

# set to 1 for leaving some debugging files
MW_DEBUG=1

# set to 1 for using btrfs cloning
MW_BTRFS=0

# this should be passed as arg - e.g. mws.cs.ru.nl
WIKIHOST=localhost

# this is an optional mirror repo, to which the frontend will be mirrored
MIRROR=


APACHE_ROOT=
HTTPD_CONF_DIR=$(APACHE_ROOT)/etc/apache2/sites-enabled
MWUSER=mwiki

MWUSER_NAME=$(MWUSER)
MWUSER_EMAIL=$(MWUSER)@none.noe

# path to you cgi-bin directory, where mwiki goes
CGILIB=/var/www/bin/$(REPO_NAME)

#CGILIB=$(MWUSER_HOME)/public_html/cgi-bin

# this is the gitolite-aware frontend for the PUBLIC_REPO
BARE_PUBLIC_REPO_SSH=$(MWUSER)@$(WIKIHOST):public


# name and email for the web commits; note that this goes only into backend
WEB_GIT_NAME="Web Committer"
WEB_GIT_EMAIL=webcommit@none.none

# .PHONY: all repo sandbox deps xml repo-miz repo-prel repo-perl repo-bin repo-xsl repo-export repo-gitinit repo-makefiles

MIZBINARIES=accom envget exporter makeenv transfer verifier

MIZROOTFILES=mml.ini mml.vct mizar.dct mizar.msg

# gitolite

GITOLITE_REPO=/home/urban/ec/gitolite
#GITOLITE_REPO=git://github.com/sitaramc/gitolite.git
GITOLITE_SOURCE_DIR=$(REPOS_BASE)/gitolite-source
GITOLITE_BIN_DIR=$(MWUSER_HOME)/bin

# ###TODO: these two might not be needed, they might be in .gitolite anyway 
GITOLITE_CONF_DIR=$(MWUSER_HOME)/gitolite/conf
GITOLITE_HOOKS_DIR=$(MWUSER_HOME)/gitolite/hooks


GITOLITE_ADMIN_DIR=$(MWUSER_HOME)/gitolite-admin

# ##NEEDS: $(MWUSER_HOME)/.ssh/id_rsa.pub  is in place
# ##NEEDS: $(GITOLITE_REPO) exists and is clonable

gitolite-setup:
	# chown -R $(MWUSER):$(MWUSER) $(REPOS_BASE)
	# setup gitolite in the  $(MWUSER) home
	sudo -u $(MWUSER) git clone $(GITOLITE_REPO) $(GITOLITE_SOURCE_DIR)
	sudo -u $(MWUSER) mkdir -p $(GITOLITE_BIN_DIR) $(GITOLITE_CONF_DIR) $(GITOLITE_HOOKS_DIR)  $(GITOLITE_ADMIN_DIR)
	cd $(GITOLITE_SOURCE_DIR) && sudo -u $(MWUSER) sh -c 'export HOME=$(MWUSER_HOME) && export PATH=$$PATH:$$HOME/bin &&  ./src/gl-system-install $(GITOLITE_BIN_DIR) $(GITOLITE_CONF_DIR) $(GITOLITE_HOOKS_DIR)'
	cp $(MWUSER_HOME)/.ssh/id_rsa.pub /tmp/$(MWUSER).pub
	sudo -u $(MWUSER) sh -c 'export HOME=$(MWUSER_HOME) && export PATH=$$PATH:$$HOME/bin && gl-setup  -q /tmp/$(MWUSER).pub'
	# change the default umask to 0022 so that the repos are gitweb-visible
	grep -q '$$REPO_UMASK = 0077;' $(MWUSER_HOME)/.gitolite.rc && \
	  sed -ie 's/$$REPO_UMASK = 0077;/$$REPO_UMASK = 0022;/g' $(MWUSER_HOME)/.gitolite.rc
	rm /tmp/$(MWUSER).pub
	chown -R $(MWUSER):$(MWUSER) $(REPOS_BASE)
	sudo -u $(MWUSER) git clone $(MWUSER)@localhost:gitolite-admin $(GITOLITE_ADMIN_DIR)
	sudo -u $(MWUSER) touch $(GITOLITE_ADMIN_DIR)/conf/users.conf # initially empty list of users
	chmod 755 $(MWUSER_HOME)/repositories
	# testing and public repos
	sed -e "s|@@MWUSER@@|$(MWUSER)|g" < gitolite-config > $(GITOLITE_ADMIN_DIR)/conf/gitolite.conf
	cd $(GITOLITE_ADMIN_DIR) && sudo -u $(MWUSER) sh -c 'export HOME=$(MWUSER_HOME) && export PATH=$$PATH:$$HOME/bin && git add  conf/users.conf && git commit -a -m "Include users.conf in the config file and register the mwiki with gitolite." && git push'
	# suexec config - TODO: this is probably unnnecessary now - test
	chown -R $(MWUSER):$(MWUSER) /home/$(MWUSER)
	perl -e 'open(A,$$ARGV[0]); while(<A>) { s/##MWUSER##/$$ARGV[1]/g; print }' \
          suexec-config $(MWUSER) > /etc/apache2/suexec/$(MWUSER)
	# the mwadmin directory
	mkdir -p $(MWADMIN_DIR)
	touch $(MWADMIN_DIR)/gitolite-users
	cp -a -t $(MWADMIN_DIR) mwbase/.dotgit*/hooks/*;
	cp subv_del.c $(GITOLITE_BIN_DIR)
	chown -R $(MWUSER):$(MWUSER) $(MWADMIN_DIR)

repos: public-repos gitweb mwiki
ifneq ($(MW_DEBUG),1)
	rm -Rf $(SCRATCH_BASE) # no need for this anymore
endif

public-repos: public-repo-init public-sandbox public-repo-export
	chown -R $(MWUSER):$(MWUSER) $(MWUSER_HOME)


scratch-directories: gitolite-setup
	mkdir -p $(SCRATCH_BASE)
	cd $(SCRATCH_BASE) && mkdir mml dict prel bin xsl html .perl

scratch-mizfiles: scratch-directories
	# .miz
	for article in hidden tarski $(INITIAL_SEGMENT); do \
	  $(INSTALL) --preserve-timestamps --mode=644 $(MIZFILES)/mml/$$article.miz $(SCRATCH_BASE)/mml; \
	done
	# prel
	cp -p $(MIZFILES)/prel/h/hidden.* $(SCRATCH_BASE)/prel
	cp -p $(MIZFILES)/prel/*/*.dre $(SCRATCH_BASE)/prel
	# data
	for rootfile in $(MIZROOTFILES); do \
	  cp -p $(MIZFILES)/$$rootfile $(SCRATCH_BASE); \
	done
	# ##TODO: do we need mml.lar??
	head -n $(NUM_ARTICLES) $(MIZFILES)/mml.lar > $(SCRATCH_BASE)/mml.lar
	# bin
	for binary in $(MIZBINARIES); do \
	  $(INSTALL) --mode 755 $(MIZBIN)/$$binary $(SCRATCH_BASE)/bin/$$binary; \
	done
	# xsl
	for sheet in $(SHEETS); do \
	  $(INSTALL) --mode 644 $(XSL4MIZ)/$$sheet.xsl $(SCRATCH_BASE)/xsl; \
	done
	cp -a -t $(SCRATCH_BASE) mwbase/* mwbase/.perl
	sed -ie "s|@@REPO_NAME@@|$(REPO_NAME)|g;" $(SCRATCH_BASE)/Makefile
	chown -R $(MWUSER):$(MWUSER) $(SCRATCH_BASE)

scratch-deps: scratch-mizfiles
	touch $(SCRATCH_BASE)/mml/hidden-prel # everything depends on hidden-prel
	@$(MAKE) -C $(SCRATCH_BASE)/mml -j $(MAKEJOBS) evls deps MIZFILES=$(SCRATCH_BASE) PATH=$(SCRATCH_BASE)/bin:$(PATH)

scratch-html: scratch-deps
	@$(MAKE) -C $(SCRATCH_BASE) -j $(MAKEJOBS) xmlvrfs prels absrefs htmls MIZFILES=$(SCRATCH_BASE) PATH=$(SCRATCH_BASE)/bin:$(PATH) WIKIHOST=$(WIKIHOST) GITPROJECT=public.git MWIKICGI=http://$(WIKIHOST)/bin/$(REPO_NAME)/mwiki.cgi

scratch: scratch-html


public-mwiki-user:
	# -adduser --shell=/usr/bin/git-shell \
	#   --disabled-password \
	#   --home=$(PUBLIC_REPOS_BASE) \
	#   $(MWUSER) \
	#     || echo "$(MWUSER) already exists"
	sv down git-daemon
	mv /etc/sv/git-daemon/run /etc/sv/git-daemon/run.original
	install -m 755 mwiki-gitdaemon.run /etc/sv/git-daemon/run
	sv up git-daemon


# ##TODO: refactor follwoing using the functions from mwiki.cgi

public-repo-init: public-mwiki-user scratch
ifeq ($(MW_BTRFS),1)
	mkdir -p $(REPOS_BASE)	
	btrfs subvolume create  $(PUBLIC_REPO)
else
	mkdir -p $(PUBLIC_REPO)
endif
	cp -a -t $(PUBLIC_REPO) $(SCRATCH_BASE)/* $(SCRATCH_BASE)/.perl
	chown -R $(MWUSER):$(MWUSER) $(PUBLIC_REPO)
	chmod 755 $(PUBLIC_REPO)

	cd $(PUBLIC_REPO) && git init
	$(INSTALL) --mode 644 --owner=$(MWUSER) --group=$(MWUSER) mwbase/.mml-gitignore $(PUBLIC_REPO)/.gitignore
	cd $(PUBLIC_REPO) && git add . && git commit -m 'Initial commit.' \
	   && git config  user.name $(WEB_GIT_NAME) \
	   && git config  user.email $(WEB_GIT_EMAIL) \
           && git config mwiki.wikihost $(WIKIHOST) \
           && git config mwiki.makejobs $(MAKEJOBS) \
           && git config mwiki.allowskippedproofs $(ALLOWSKIPPEDPROOFS) \
           && git config mwiki.htmldir http://$(WIKIHOST)/$(PUBLIC_REPO_NAME)
	# hooks and description - only after we do the first commit
	cp -a -t $(PUBLIC_REPO)/.git mwbase/.dotgitbackend/*
	chown -R $(MWUSER):$(MWUSER) $(PUBLIC_REPO)/.git


## We set up the sandbox here, because we want to be fast with first
## recompilation. With rsync, this can take a time.

public-sandbox: scratch # our dirty sandbox
ifeq ($(MW_BTRFS),1)
	btrfs subvolume snapshot  $(PUBLIC_REPO) $(PUBLIC_SANDBOX)
else
	rsync -a --del $(PUBLIC_REPO)/ $(PUBLIC_SANDBOX)
endif


#	rsync -a --del $(SCRATCH_BASE)/ $(PUBLIC_SANDBOX)
#                                ===> ^ <===
# trailing slash -- see the rsync man page to learn why it's there


# git clone --bare $(PUBLIC_REPO) $(MWUSER_HOME)/repositories/$(REPO_NAME).git
# 	git clone --bare $(PUBLIC_REPO) $(BARE_PUBLIC_REPO)


public-repo-export: public-repo-init
	# the public repos was created during gitolite-setup
	sudo -u $(MWUSER) sh -c 'cd $(PUBLIC_REPO) && git push --all $(BARE_PUBLIC_REPO_SSH)'
	$(INSTALL) --mode=644 --owner=$(MWUSER) --group=$(MWUSER) \
	  mwbase/.dotgitfrontend/description $(BARE_PUBLIC_REPO)/description
	for hookfile in pre-receive post-update; do \
	  sed -e "s|@@BACKEND@@|$(PUBLIC_REPO)|g; s|@@MIRROR@@|$(MIRROR)|g;" < mwbase/.dotgitfrontend/hooks/$$hookfile.in \
	    > $(BARE_PUBLIC_REPO)/hooks/$$hookfile; \
	  chmod 755 $(BARE_PUBLIC_REPO)/hooks/$$hookfile; \
	  chown $(MWUSER):$(MWUSER) $(BARE_PUBLIC_REPO)/hooks/$$hookfile; \
	done
	touch $(BARE_PUBLIC_REPO)/git-daemon-export-ok
	cd $(BARE_PUBLIC_REPO) && git config core.sharedRepository true \
           && git config daemon.receivepack true \
           && git config mwiki.backend $(PUBLIC_REPO)/ \
           && git config mwiki.wikihost $(WIKIHOST) \
           && git config mwiki.makejobs $(MAKEJOBS) \
           && git config mwiki.allowskippedproofs $(ALLOWSKIPPEDPROOFS) \
           && git config mwiki.htmldir http://$(WIKIHOST)/$(PUBLIC_REPO_NAME) 
	cd $(PUBLIC_REPO) && git remote add frontend $(BARE_PUBLIC_REPO_SSH)


gitweb: public-repo-export 
	mkdir -p $(GITWEB_ROOT)/$(REPO_NAME)
	chown -R $(MWUSER):$(MWUSER) $(GITWEB_ROOT)/$(REPO_NAME)
	ln -s $(BARE_PUBLIC_REPO) $(GITWEB_ROOT)/$(REPO_NAME).git
	ln -s $(BARE_PUBLIC_REPO) $(GITWEB_ROOT)/$(REPO_NAME)/public.git
	mkdir -p $(CGILIB)
	chown -R $(MWUSER):$(MWUSER) $(CGILIB)
	$(INSTALL) --mode 755 --owner=$(MWUSER) --group=$(MWUSER) \
	  /usr/lib/cgi-bin/gitweb.cgi  $(CGILIB)/gitweb.cgi
	$(INSTALL) -m 644 gitweb $(APACHE_ROOT)/etc/apache2/sites-available/gitweb
	cd $(APACHE_ROOT)/etc/apache2/sites-enabled \
	  && ln -f -s ../sites-available/gitweb gitweb
	apache2ctl restart

apacheconf:
	perl -e 'open(A,$$ARGV[0]); while(<A>) {s/##REPO_NAME##/$$ARGV[1]/g; s/##REPOS_BASE##/$$ARGV[2]/g; s/##REPO_DIR_INDEX##/$$ARGV[3]/g; s/##CGILIB##/$$ARGV[4]/g; s/##MWUSER##/$$ARGV[5]/g; print }' \
          apacheconf-mizar.in $(REPO_NAME) $(REPOS_BASE) $(REPO_DIR_INDEX) $(CGILIB) $(MWUSER)> \
          $(APACHE_ROOT)/etc/apache2/sites-available/$(REPO_NAME) \
          && chmod 644 $(APACHE_ROOT)/etc/apache2/sites-available/$(REPO_NAME)

mwiki: public-repos apacheconf
	mkdir -p $(CGILIB)
	chown -R $(MWUSER):$(MWUSER) $(MWUSER_HOME)
	sed -e "s|@@MWUSER@@|$(MWUSER)|g; s|@@MW_BTRFS@@|$(MW_BTRFS)|g; s|@@REPO_NAME@@|$(REPO_NAME)|g; s|@@GITWEB_ROOT@@|$(GITWEB_ROOT)|g;" < mwbase/.perl/mw_common.pm > $(CGILIB)/mw_common.pm
	cp mwiki.cgi $(CGILIB)/mwiki.cgi
	chown -R $(MWUSER):$(MWUSER) $(CGILIB)/mw_common.pm 
	chmod 644 $(CGILIB)/mw_common.pm
	chown -R $(MWUSER):$(MWUSER) $(CGILIB)/mwiki.cgi
	chmod 755 $(CGILIB)/mwiki.cgi
	cd $(GITOLITE_BIN_DIR) && gcc subv_del.c -o subv_del && chown root:root subv_del && chmod 4755 subv_del
	cd $(APACHE_ROOT)/etc/apache2/sites-enabled \
	  && ln -f -s ../sites-available/$(REPO_NAME) $(REPO_NAME)
	#chown -R $(MWUSER):$(MWUSER) /home/$(MWUSER)
	apache2ctl restart

# ##TODO: This probably cannot be trusted now

clean:
	rm -Rf $(REPOS_BASE)
	rm -f $(GITWEB_ROOT)/$(REPO_NAME).git
	rm -Rf $(GITWEB_ROOT)/$(REPO_NAME)
	# -killall git-daemon
	# deluser $(MWUSER) \
	#   || echo "user $(MWUSER) doesn't exist"
	rm -f $(APACHE_ROOT)/etc/apache2/sites-available/gitweb
	rm -f $(APACHE_ROOT)/etc/apache2/sites-enabled/$(REPO_NAME)
	rm -f $(APACHE_ROOT)/etc/apache2/sites-available/$(REPO_NAME)
	rm -f $(APACHE_ROOT)/etc/apache2/sites-enabled/gitweb
	rm -f $(APACHE_ROOT)/var/log/apache2/gitweb.error.log
	rm -f $(APACHE_ROOT)/var/log/apache2/gitweb.access.log
	apache2ctl restart
	sv down git-daemon
	-mv -f /etc/sv/git-daemon/run.original /etc/sv/git-daemon/run
	sv up git-daemon
	# gitolite cleanup - TODO: GITOLITE_INSTALL_DIR is undefined!
	rm -Rf $(GITOLITE_INSTALL_DIR)/.gitolite
	rm -Rf $(GITOLITE_INSTALL_DIR)/gitolite
	rm -Rf $(GITOLITE_INSTALL_DIR)/repositories
	rm -f $(GITOLITE_INSTALL_DIR)/projects.list
	rm -f $(GITOLITE_INSTALL_DIR)/bin/gitolite*
	rm -f $(GITOLITE_INSTALL_DIR)/bin/gl-*
	rm -f $(GITOLITE_INSTALL_DIR)/bin/sshkeys-lint
	rm -Rf $(MWUSER_HOME)/.gitolite
	rm -Rf $(MWUSER_HOME)/gitolite
	rm -Rf $(MWUSER_HOME)/repositories
	rm -f $(MWUSER_HOME)/projects.list
	rm -f $(MWUSER_HOME)/bin/gitolite*
	rm -f $(MWUSER_HOME)/bin/gl-*
	rm -f $(MWUSER_HOME)/bin/sshkeys-lint
	# mwuser stuff - untested, and perhaps unwanted
	rm -Rf /home/$(MWUSER)/*

