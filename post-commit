#!/usr/bin/perl -w

use strict;
use warnings;
use Carp;
use File::Spec;

# Move changes from the sandbox, where we just successfully
# verified/compiled a bunch of changes to the MML.

my $cwd = getcwd ();
my @repo_path_dirs = File::Spec->splitdir ($cwd);
my $repo_name = $repo_path_dirs[$#repo_path_dirs];
my $compiled = $cwd . "/" . "../$repo_name-compiled";
my $sandbox = $cwd . "/" . "../$repo_name-sandbox";
my $sandbox_mml = $sandbox . "/" . "mml";

chdir ($sandbox);
if (!defined ($ENV{"MIZBIN"}) or -z $ENV{"MIZBIN"}) {
  $ENV{"MIZBIN"} = $sandbox . "/bin";
}
$ENV{"PATH"} = $ENV{"PATH"} . ":" . $ENV{"MIZBIN"};
`MIZFILES=$sandbox make absrefs > make-absrefs-out 2> make-absrefs-err`;
`MIZFILES=$sandbox make htmls > make-htmls-out 2> make-htmls-err`;
chdir ($sandbox_mml);
`../.perl/mkmmlindex.pl *.hdr > ../html/index.html`;
chdir ($cwd);

# Copy the sandbox: force compiled to be a copy of the known compiled MML.
# We are hoping that this is fairly fast.
warn ("rsync-ing...");
`rsync -a --del $sandbox/ $compiled`;
warn ("rsync-ing complete.");

# Refresh the JFM-like "portal", in light of the new changes.

# JU: also two options for htmlization (the xsl command)
#   - do the xsl processing here (post-commit) - once all is verified, we should not fail
#   - do them as part of pre-commit - to ensure it is ok before commiting, and to ensure commited=shown quickly
#   - we should investigate if there are any internal locks used by git during pre/post commits, and
#     how to possibly handle heavy load on one clone by fast rerouting to another one, etc

exit 0;
