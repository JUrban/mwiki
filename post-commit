#!/usr/bin/perl -w

use strict;
use warnings;
use Carp;
use File::Spec;
use Cwd;

sub pc_pad {
  my $str = shift;
  chomp $str;
  return ("[post-commit] $str\n");
}

# I think there's a slicker way to do this, using output filters, but
# for now let's just do this as a subroutine.
sub pc_print {
  my $str = shift;
  chomp ($str); # in case it already had some extra whitespace at the end
  print (pc_pad ($str . "\n"));
}

# Move changes from the sandbox, where we just successfully
# verified/compiled a bunch of changes to the MML.

my $cwd = getcwd ();
my @repo_path_dirs = File::Spec->splitdir ($cwd);
my $repo_name = $repo_path_dirs[$#repo_path_dirs];
my $compiled = $cwd . "/" . "../$repo_name-compiled";
my $sandbox = $cwd . "/" . "../$repo_name-sandbox";
my $sandbox_mml = $sandbox . "/" . "mml";

chdir ($sandbox);
if (!defined ($ENV{"MIZBIN"}) or -z $ENV{"MIZBIN"}) {
  $ENV{"MIZBIN"} = $sandbox . "/bin";
}
$ENV{"PATH"} = $ENV{"PATH"} . ":" . $ENV{"MIZBIN"};

my $makejobs = 1;
if (defined ($ENV{"MAKEJOBS"})) {
  $makejobs = $ENV{"MAKEJOBS"};
}

`MIZFILES=$sandbox make --jobs $makejobs absrefs > make-absrefs-out 2> make-absrefs-err`;
`MIZFILES=$sandbox make --jobs $makejobs htmls > make-htmls-out 2> make-htmls-err`;
chdir ($sandbox_mml);
`../.perl/mkmmlindex.pl *.hdr > ../html/index.html`;
chdir ($cwd);

# Copy the sandbox: force compiled to be a copy of the known compiled MML.
# We are hoping that this is fairly fast.
`rsync -a --del $sandbox/ $compiled`;
# note the slash   ===> ^ <===  see the rsync man page to learn why

exit 0;
