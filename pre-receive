#!/usr/bin/perl -w

use strict;
use warnings;
use File::Temp qw/ tempdir /;
use Carp;
use Cwd;

# There should be exactly one line given to this script by git.
my $first_line = <STDIN>;
my $second_line = <STDIN>;

sub pr_pad {
  my $str = shift;
  return ("[pre-receive] $str");
}

# I think there's a slicker way to do this, using output filters, but
# for now let's just do this as a subroutine.
sub pr_print {
  my $str = shift;
  chomp ($str); # in case it already had some extra whitespace at the end
  print (pr_pad ($str . "\n"));
}

unless (defined $first_line) {
  pr_print ('Standard input was empty!  How is that possible?');
  exit 1;
}

if (defined $second_line) {
  pr_print ('We currently handle pushes to only one refspec (namely, the master branch)');
  exit 1;
}

# Ensure that the line we've received has the right form, as specified
# in the git man page githooks:
#
# <old-value> SP <new-value> SP <ref-name> LF
chomp $first_line;
my ($old_sha1, $new_sha1, $refspec) = split (/\ /, $first_line);
unless (defined $old_sha1 && defined $new_sha1 && defined $refspec) {
  pr_print ('The given line does not match the format specified in the githooks(5) man page');
  exit 1;
}

# Check for sane SHA1 values
unless ($old_sha1 =~ /[a-z0-9]{40}/ && $new_sha1 =~ /[a-z0-9]{40}/) {
  pr_print ('Suspicious SHA1 values given');
  exit 1;
}

# Ensure that the new SHA1 and the old SHA1 are the names of commit
# objects.
my $old_sha1_type = `git cat-file -t $old_sha1`;
my $new_sha1_type = `git cat-file -t $new_sha1`;
chomp $old_sha1_type;
chomp $new_sha1_type;
unless ($old_sha1_type eq 'commit') {
  pr_print ("The old object with the name,");
  pr_print ("  $old_sha1");
  pr_print ("is not a commit; unable to proceed.");
  exit 1;
}
unless ($new_sha1_type eq 'commit') {
  pr_print ("The new object with the name,");
  pr_print ("  $new_sha1");
  pr_print ("is not a commit; unable to proceed.");
  exit 1;
}

# We permit pushes only to the refpsec "refs/heads/master".
unless ($refspec eq 'refs/heads/master') {
  pr_print ('We permit pushes only to the master branch');
  exit 1;
}

# Now that we know that the SHA1 object names being pushed are
# commits, find their associated trees
my $old_commit_tree = `git cat-file commit $old_sha1 | grep ^tree | cut -f 2 -d ' '`;
my $new_commit_tree = `git cat-file commit $new_sha1 | grep ^tree | cut -f 2 -d ' '`;
chomp $old_commit_tree;
chomp $new_commit_tree;

pr_print ("old commit tree: $old_commit_tree");
pr_print ("new commit tree: $new_commit_tree");

# Ensure that no non-mizar code is being pushed
my @non_miz_files 
  = `git show --pretty=oneline --name-only $new_sha1 | tail -n -1 | grep --invert-match ".miz"`;
unless (scalar @non_miz_files == 0) {
  pr_print ('We do not currently support pushing non-.miz files to our repository');
  exit 1;
}

# Ensure that all .miz files satisfy these conditions:
#
# 1 they are under the mml subdirectory
# 2 they are actually files, i.e., blobs in git terminology
# 3 their size is less than, say, one megabyte;
# 4 they have mode 644 ("should never happen", given condition #2)
my @miz_files = `git show --name-only --pretty=oneline $new_sha1 | tail -n -1 | grep "\.miz\$"`;
for my $miz_file (@miz_files) {
  chomp $miz_file;
  unless ($miz_file =~ /^mml\/(.*\.miz)$/) { # strip the "mml/" prefix
    pr_print ("Suspcious: .miz file is not under the mml subdirectory");
    pr_print ("The path is $miz_file");
    exit 1;
  }
  my $article_filename = $1; # from previous match, stripping "mml/" prefix

  my $miz_file_size = `git cat-file -s $new_sha1:$miz_file`;
  chomp $miz_file_size;
  unless ($miz_file_size < 1000000) {
    pr_print ("Suspicious: the .miz file $miz_file is bigger than one megabyte");
    exit 1;
  }
  my $mode = `git ls-tree -r $new_commit_tree $miz_file | cut -f 1 -d ' '`;
  chomp $mode;
  unless ($mode eq '100644') {
    pr_print ("Suspicious: a .miz file is being commited with mode $mode; we permit only mode 100644");
    exit 1;
  }
  my $miz_file_type = `git ls-tree -r $new_commit_tree $miz_file | cut -f 2 -d ' '`;
  chomp $miz_file_type;
  unless ($miz_file_type eq 'blob') {
    pr_print ("The .miz file $miz_file is somehow not a git blob object");
    exit 1;
  }
}

# Now let's try to commit these files to the backend repo.  First, we
# need to store them somewhere.  They are already on the server as
# objects.  I suppose we could just directly copy the files, using the
# SHA1 object names.  But just for the sake of simplicity, let's first
# use git show to do the job for us.
#
# How will we deal with the problem of possibly bad files?  We shall
# first copy the files in the backend repo that are supposed to be
# updated; these are known to be safe.  Then, we'll add the new .miz
# files to the backend repo, and call git add there on them.  Then
# we'll call git commit in the backend repo.  If this works, then we
# don't have anything else to do; we can delete the copies of the
# known safe .miz files that we made earlier.  IF something goes wrong
# with the pre-commit hook, then we move the known safe mizar files
# back into their original place.

my $backend_repo_path = '/tmp/mwiki/mwiki';
my $backend_repo_mml = $backend_repo_path . "/" . "mml";

# Separate the old miz files -- the ones that already exist in the
# backend repo -- from the new miz files -- the genuinely new
# contributions.  To determine whether something is old/already
# exists, we'll use the old SHA1 that was given to this script as
# input.  It should point to a commit object (and hence, indirectly,
# to a tree object) that already exists on in the frontend repo.

my @new_miz_files = ();
my @updated_miz_files = ();
my @received_mml_miz_files 
  = `git ls-tree -r $new_commit_tree mml/ | cut -f 2`; # a list of "mml/<something>" items

foreach my $received_miz_file (@miz_files) {
  chomp $received_miz_file; # looks like "mml/<something>"
  `git cat-file -e $old_commit_tree:$received_miz_file 2> /dev/null`;
  my $git_cat_file_exit_code = ($? >> 8);
  if ($git_cat_file_exit_code == 0) {
    push @updated_miz_files, $received_miz_file;
  } else {
    push @new_miz_files, $received_miz_file;
  }
}

sub strip_initial_mml {
  my $path = shift;
  $path =~ /^mml\/(.+\.miz$)/;
  my $stripped = $1;
  unless (defined $stripped) {
    die "Something went wrong when trying to strip the \"mml/\" from \"$path\"";
  }
  return $stripped;
}

pr_print ("brand new mizar files: ");
if (scalar @new_miz_files == 0) {
  pr_print ("(none)");
} else {
  pr_print ("@new_miz_files");
}
pr_print ("mizar files to be updated: ");
if (scalar @updated_miz_files == 0) {
  pr_print ("(none)");
} else {
  pr_print ("@updated_miz_files");
}

# Copy the files that already exist in the backend repo to a temporary
# location.  If things work, these will simply be deleted.  Otherwise,
# they will be resurrected and put back into the backend repo.
my $purgatory = tempdir ();
my $purgatory_mml = $purgatory . "/" . "mml";
mkdir $purgatory_mml;

# Move the already existing mizar files to the backend repo
foreach my $updated_miz_file (@updated_miz_files) {
  chomp $updated_miz_file;
  my $article_filename = strip_initial_mml ($updated_miz_file);
  my $purgatory_path = $purgatory_mml . "/" . $article_filename;
  `git show $old_commit_tree:$updated_miz_file > $purgatory_path`;
}

# Now that we've moved the mizar files that are updated in this
# proposed commit to a safe purgatory, copy the contents of the new
# new files to the backend repo.
foreach my $received_mml_miz_file (@miz_files) {
  chomp $received_mml_miz_file;
  my $article_filename = strip_initial_mml ($received_mml_miz_file);
  my $received_path = $backend_repo_mml . "/" . $article_filename;
  `git cat-file blob $new_commit_tree:$received_mml_miz_file > $received_path`;
  unless (-e $received_path) {
    die "We didn't output anything to $received_path";
  }
}

sub ensure_directory {
  my $maybe_dir = shift;
  if (-d $maybe_dir) {
    return $maybe_dir;
  } else {
    croak ("The given directory, $maybe_dir, is not actually a directory");
  }
}

sub move_all_files_from_to {
  my $source_dir = ensure_directory (shift);
  my $target_dir = ensure_directory (shift);
  `find $source_dir -type f -maxdepth 1 -exec mv {} $target_dir ";"`;
  my $find_exit_status = ($? >> 8);
  if ($find_exit_status == 0) {
    return;
  } else {
    croak ("Error copying the files from $source_dir to $target_dir!");
  }
}

# All newly received mizar files are now in sitting in the backend
# repo.  Now we add them.
$ENV{GIT_DIR} 
  = $backend_repo_path . "/" . ".git"; # GIT_DIR is set to "." by git
chdir $backend_repo_path;              # before executing this hook!
my $git_add_output = `git add @miz_files 2>&1`;
my $git_add_exit_code = ($? >> 8);
unless ($git_add_exit_code == 0) {
  pr_print ("Error adding the new mizar files to the backend repository:");
  pr_print ("The output of the command was:");
  pr_print ("============================================================");
  pr_print ("$git_add_output");
  pr_print ("============================================================");
  pr_print ("The exit code was $git_add_exit_code");

  move_all_files_from_to ($purgatory_mml, $backend_repo_mml);

  exit 1;
}

# We've successful added new files to the repo -- let's commit!
$ENV{GIT_DIR} = $backend_repo_path . "/" . ".git"; # just to be safe
my $git_commit_output 
  = `git commit -m "Anon push" 2>&1`;
my $git_commit_exit_code = ($? >> 8);
unless ($git_commit_exit_code == 0) {
  pr_print ("Error commiting the new mizar files to the backend repository:");
  pr_print ("The output of the command was:");
  pr_print ("============================================================");
  pr_print ("$git_commit_output");
  pr_print ("============================================================");
  pr_print ("The exit code was $git_commit_exit_code");

  # The commit failed, so we need to resurrect the files in purgatory
  move_all_files_from_to ($purgatory_mml, $backend_repo_mml);

  exit 1;
}

# If we made it this far, then we deserve to take a break.
exit 0;
