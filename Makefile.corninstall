# -*- mode: makefile; -*-

# An install script, as Makefile, to set up the initial installation
# of the coq/corn wiki.  We will probably run this only a handful of
# times.

# The following should be present in the environment or as argments to
# `make':
#
# - REPOS_BASE: the root directory where our repos -- the backend and
#   the bare frontend -- will be stored
#
# - LIBFILES: the root directory of a coq/corn library installation.  It should
#   contain the .doclist file and .v files, preferably not be compiled
#
# One can optionally specify:
#
# - CGI_NAME: default: cwiki.cgi.  The name of the wiki cgi
#
# - COQBIN: default: $(LIBFILES)/bin.  The directory where the Coq
#   binaries are held
#
# - MAKEJOBS: default 1.  The degree of parallelization used by make
#   when computing the initial HTML-ized presentation of the LIB
#
# - ALLOWSKIPPEDPROOFS: default 1.  Allow @proof (proof skipping) in
#   articles.
#
# - NUM_ARTICLES: default 0.  The length of the initial segment of
#   cornlist (taken from LIBFILES).  Set it to 0 to ensure
#   that the whole library is used; set it to a low-value for
#   debugging purposes.
#
# - MWIKI_USER: default "mwiki".  The name of the unix user to add that
#   will preside over the whole mess.
#
# - INSTALL: default /usr/bin/install.  If this is GNU install, then
#   no need to adjust.  (On Mac OX X, /usr/bin/install is not GNU
#   install, so I need to set this value to "ginstall".)
#
# - HEAD: default /usr/bin/head.  See description of INSTALL variable.

REPO_NAME=cwiki
CGI_NAME=cwiki.cgi
REPO_DIR_INDEX=index.html
REPO_DIR_CONTENTS=toc.html
SCRATCH_BASE=$(REPOS_BASE)/scratch
PUBLIC_REPOS_BASE=$(REPOS_BASE)/public
PUBLIC_REPO=$(REPOS_BASE)/public/$(REPO_NAME)
PUBLIC_SANDBOX=$(PUBLIC_REPOS_BASE)/sandbox
PUBLIC_COMPILED_REPO=$(PUBLIC_REPOS_BASE)/compiled
BARE_PUBLIC_REPO=$(PUBLIC_REPOS_BASE)/$(REPO_NAME).git
REPOBIN=$(PUBLIC_REPO)/bin
COQBIN=$(LIBFILES)/bin
MAKEJOBS=1
ALLOWSKIPPEDPROOFS=1
CSS=article index
JAVASCRIPT=article
PERLSCRIPTS=
PERLMODULES=
GITWEB_ROOT=/var/cache/git
NUM_ARTICLES=0
HEAD=/usr/bin/head
INSTALL=/usr/bin/install

# this should be passed as arg - e.g. mws.cs.ru.nl
WIKIHOST=localhost

# path to you cgi-bin directory, where mwiki goes
CGILIB=/usr/lib/cgi-bin

APACHE_ROOT=
HTTPD_CONF_DIR=$(APACHE_ROOT)/etc/apache2/sites-enabled
PUBLIC_MWIKI_USER=mwiki

# name and email for the web commits; note that this goes only into backend
WEB_GIT_NAME="Web Committer"
WEB_GIT_EMAIL=webcommit@none.none

# .PHONY: all repo sandbox deps xml repo-miz repo-prel repo-perl repo-bin repo-xsl repo-export repo-gitinit repo-makefiles

COQBINARIES=coqc coqc.opt coqdep coqdoc

COQDOCFILES=coqheader.in coqfooter.in coqindexheader.in

repos: public-repos gitweb mwiki
	rm -Rf $(SCRATCH_BASE) # no need for this anymore

public-repos: public-repo-init public-sandbox public-compiled public-repo-export
	chown -R $(PUBLIC_MWIKI_USER) $(PUBLIC_REPOS_BASE)
	chgrp -R $(PUBLIC_MWIKI_USER) $(PUBLIC_REPOS_BASE)


scratch-directories:
	mkdir -p $(SCRATCH_BASE)


scratch-libfiles: scratch-directories
	# articles
	cp -a $(LIBFILES)/* $(SCRATCH_BASE)
	cd $(SCRATCH_BASE) && mkdir bin .perl && mv Makefile Makefile.original
	# when only initial segment used (testing)
	if (test 0 -ne $(NUM_ARTICLES)); then \
	  head -n $(NUM_ARTICLES) cornlist > $(SCRATCH_BASE)/.doclist && \
	  cd $(SCRATCH_BASE) && \
          sort .doclist > .docsorted && \
	  find -name "*.v" -not -name 'Transparent_*' -not -name 'Opaque_*' | sed -e 's/\.\///' > .alllist && \
          sort .alllist > .allsorted && \
          rm `comm -1 -3 .docsorted .allsorted` && \
          rm .doclist .docsorted .alllist .allsorted; \
        fi 
	# bin
	for binary in $(COQBINARIES); do \
	  $(INSTALL) --mode 755 $(COQBIN)/$$binary $(SCRATCH_BASE)/bin/$$binary; \
	done
	# doc
	for doc in $(COQDOCFILES); do \
	  $(INSTALL) --mode 755 $$doc $(SCRATCH_BASE)/doc/$$doc; \
	done
	# perl
	for perlfile in $(PERLMODULES); do \
	  $(INSTALL) --mode 644 $$perlfile.pm $(SCRATCH_BASE)/.perl; \
	done
	for perlfile in $(PERLSCRIPTS); do \
	  $(INSTALL) --mode 755 $$perlfile.pl $(SCRATCH_BASE)/.perl; \
	done
	# makefiles
	$(INSTALL) --mode 644 Makefile.coqrepo $(SCRATCH_BASE)/Makefile

scratch-deps: scratch-libfiles

scratch-html: scratch-deps
	@$(MAKE) -C $(SCRATCH_BASE) -j $(MAKEJOBS) allvo allhtml LIBFILES=$(SCRATCH_BASE) PATH=$(SCRATCH_BASE)/bin:$(PATH) WIKIHOST=$(WIKIHOST) CGI_NAME=$(CGI_NAME) GITPROJECT=$(REPO_NAME).git REPO_DIR_INDEX=$(REPO_DIR_INDEX)

scratch: scratch-html

public-repo-init: public-mwiki-user scratch
#public-repo-init: scratch
	mkdir -p $(PUBLIC_REPO)
	cp -R $(SCRATCH_BASE)/* $(PUBLIC_REPO)
	cp -R $(SCRATCH_BASE)/.perl $(PUBLIC_REPO)
	chown $(PUBLIC_MWIKI_USER) $(PUBLIC_REPO)
	chgrp $(PUBLIC_MWIKI_USER) $(PUBLIC_REPO)

	cd $(PUBLIC_REPO) && git init
	$(INSTALL) \
	  --mode 644 \
	  --owner=$(PUBLIC_MWIKI_USER) --group=$(PUBLIC_MWIKI_USER) \
	  corn-gitignore $(PUBLIC_REPO)/.gitignore
	$(INSTALL) \
	  --mode 644 \
	  --owner=$(PUBLIC_MWIKI_USER) --group=$(PUBLIC_MWIKI_USER) \
	  public-repo-description $(PUBLIC_REPO)/.git/description
	cd $(PUBLIC_REPO) && git add . && git commit -m 'Initial commit.' \
	   && git config  user.name $(WEB_GIT_NAME) \
	   && git config  user.email $(WEB_GIT_EMAIL) \
           && git config mwiki.wikihost $(WIKIHOST) \
           && git config mwiki.makejobs $(MAKEJOBS) \
           && git config mwiki.allowskippedproofs $(ALLOWSKIPPEDPROOFS) \
           && git config mwiki.htmldir http://$(WIKIHOST)/$(REPO_NAME)

	for i in pre-commit post-commit; do \
	$(INSTALL) \
	  --mode 755 \
	  --owner=$(PUBLIC_MWIKI_USER) \
	  --group=$(PUBLIC_MWIKI_USER) \
	  $$i-coq $(PUBLIC_REPO)/.git/hooks/$$i; done


public-mwiki-user:
	# -adduser --shell=/usr/bin/git-shell \
	#   --disabled-password \
	#   --home=$(PUBLIC_REPOS_BASE) \
	#   $(PUBLIC_MWIKI_USER) \
	#     || echo "$(PUBLIC_MWIKI_USER) already exists"
	sv down git-daemon
	mv /etc/sv/git-daemon/run /etc/sv/git-daemon/run.original
	install -m 755 cwiki-gitdaemon.run /etc/sv/git-daemon/run
	sv up git-daemon

public-compiled: scratch
	rsync -a --del $(SCRATCH_BASE)/ $(PUBLIC_COMPILED_REPO)
#                                ===> ^ <===
# trailing slash -- see the rsync man page to learn why it's there


public-sandbox: scratch # our dirty sandbox
	rsync -a --del $(SCRATCH_BASE)/ $(PUBLIC_SANDBOX)
#                                ===> ^ <===
# trailing slash -- see the rsync man page to learn why it's there


public-repo-export: public-repo-init
	git clone --bare $(PUBLIC_REPO) $(BARE_PUBLIC_REPO)
	$(INSTALL) \
	  --mode=644 \
	  --owner=$(PUBLIC_MWIKI_USER) --group=$(PUBLIC_MWIKI_USER) \
	  corn-public-repo-description $(BARE_PUBLIC_REPO)/description
	for hookfile in pre-receive-coq post-update; do \
	  sed -e "s|@@BACKEND@@|$(PUBLIC_REPO)|g" < $$hookfile.in \
	    > $(BARE_PUBLIC_REPO)/hooks/$$hookfile; \
	  chmod 755 $(BARE_PUBLIC_REPO)/hooks/$$hookfile; \
	  chown $(PUBLIC_MWIKI_USER) $(BARE_PUBLIC_REPO)/hooks/$$hookfile; \
	  chgrp $(PUBLIC_MWIKI_USER) $(BARE_PUBLIC_REPO)/hooks/$$hookfile; \
	done
	touch $(BARE_PUBLIC_REPO)/git-daemon-export-ok
	cd $(BARE_PUBLIC_REPO) && git config core.sharedRepository true \
           && git config daemon.receivepack true \
           && git config mwiki.backend $(PUBLIC_REPO)/ \
           && git config mwiki.wikihost $(WIKIHOST) \
           && git config mwiki.makejobs $(MAKEJOBS) \
           && git config mwiki.allowskippedproofs $(ALLOWSKIPPEDPROOFS) \
           && git config mwiki.htmldir http://$(WIKIHOST)/$(REPO_NAME) 
	cd $(PUBLIC_REPO) && git remote add frontend $(BARE_PUBLIC_REPO)


gitweb: public-repo-export 
	if (test $(PUBLIC_REPOS_BASE) != $(GITWEB_ROOT)); then \
	  ln -s $(BARE_PUBLIC_REPO) $(GITWEB_ROOT)/$(REPO_NAME).git; \
	fi
	$(INSTALL) -m 644 gitweb $(APACHE_ROOT)/etc/apache2/sites-available/gitweb
	cd $(APACHE_ROOT)/etc/apache2/sites-enabled \
	  && ln -f -s ../sites-available/gitweb gitweb
	apache2ctl restart

apacheconf:
	perl -e 'open(A,$$ARGV[0]); while(<A>) {s/##REPO_NAME##/$$ARGV[1]/g; s/##PUBLIC_COMPILED_REPO##/$$ARGV[2]/g; s/##REPO_DIR_INDEX##/$$ARGV[3]/g; print }' \
          apacheconf.in $(REPO_NAME) $(PUBLIC_COMPILED_REPO) $(REPO_DIR_INDEX) > \
          $(APACHE_ROOT)/etc/apache2/sites-available/$(REPO_NAME) \
          && chmod 644 $(APACHE_ROOT)/etc/apache2/sites-available/$(REPO_NAME)

mwiki: public-repos apacheconf
	mkdir -p $(CGILIB)/mwiki
	$(INSTALL) -m 755 \
           --owner=$(PUBLIC_MWIKI_USER) --group=$(PUBLIC_MWIKI_USER) cwiki.cgi \
	  $(CGILIB)/mwiki/$(CGI_NAME)
	cd $(APACHE_ROOT)/etc/apache2/sites-enabled \
	  && ln -f -s ../sites-available/$(REPO_NAME) $(REPO_NAME)
	apache2ctl restart

clean:
	rm -Rf $(REPOS_BASE)
	rm -f $(GITWEB_ROOT)/$(REPO_NAME).git
	# -killall git-daemon
	# deluser $(PUBLIC_MWIKI_USER) \
	#   || echo "user $(PUBLIC_MWIKI_USER) doesn't exist"
	rm -f $(APACHE_ROOT)/etc/apache2/sites-available/gitweb
	rm -f $(APACHE_ROOT)/etc/apache2/sites-enabled/$(REPO_NAME)
	rm -f $(APACHE_ROOT)/etc/apache2/sites-available/$(REPO_NAME)
	rm -f $(APACHE_ROOT)/etc/apache2/sites-enabled/gitweb
	rm -f $(APACHE_ROOT)/var/log/apache2/gitweb.error.log
	rm -f $(APACHE_ROOT)/var/log/apache2/gitweb.access.log
	apache2ctl restart
	sv down git-daemon
	-mv -f /etc/sv/git-daemon/run.original /etc/sv/git-daemon/run
	sv up git-daemon
