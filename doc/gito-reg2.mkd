# Using apache authentication with gitweb, gitosis – repository access control

See [leho] for the full blog post.

[leho]: http://leho.kraav.com/blog/2009/10/27/using-apache-authentication-with-gitweb-gitosis-repository-access-control/


gitosis is a tool for simple hosting of git repositories and managing
access to them. gitweb has capabilities to control which repositories
are listed on the project list page – $strict_export,
$export_auth_hook and some other friends. in my case, everyone
accessing web resources are authenticating through apache, which in
turn connects to an LDAP server.


Here is a guide for setting up gitosis.

Q: how to provide gitweb access only to those repositories to which the apache user has been granted access in gitosis.conf?

A: use $export_auth_hook in /etc/gitweb.conf.


    $projectroot = '/path/to/gitosis/repositories';
    $gitosis_conf = '/path/to/gitosis/repositories/gitosis-admin.git/gitosis.conf';
    $username = $cgi->remote_user;
    $export_auth_hook = sub {
      my $projectdir = shift;
      if($projectdir =~ (/(.*?)\.git/)) {
        my $projectname = basename($1);
        open FILE, $gitosis_conf or die 'Could not open gitosis config file. Please make sure that $gitosis_conf is set properly';
        my $project_match = 0;
        my $user_match = 0;
        while() {
          if($_ =~ /^\s*members\s*\=\s*(?:.*?\s)*$username(?:\s+|$)/) {$user_match = 1;}
          if($_ =~ /^\s*writable\s*\=\s*(?:.*?\s)*$projectname(?:\s+|$)/) {$project_match = 1;}
          if($project_match && $user_match) {
             return 1;
          }
          if($_ =~ /\[group/) {
              $project_match = $user_match = 0;
          }
        }
      }
      return 0;
    };


#### Sitaram's comment

The way gitolite is designed, doing this boils down to 2 things in your subroutine:

  * "do" or "require" a file called ~/.gitolite/conf/gitolite.conf-compiled.pm (this contains just one hash called %repos that was created at "compile" time; more on this below)
  * then check if this key exists: $repos{$projectname}{R}{$username} (where username and projectname are as defined in your code above; you still need those code pieces that setup those variables of course).

That's it! No parsing of any file the way you're doing now :-)

Gitolite has a slightly different way of dealing with access. Firstly, it's access config is much, much, more flexible and powerful than the WIndows-ini style that gitosis uses. But the more important thing from your point of view is that parsing the access config is done only once, when you make a change, commit, and push. This "compile" step (as I call it) produces a hash and writes that hash out to a file.

My objective is that the "run time" (loosely speaking, the parts that come into play in deciding whether someone has access) should *not* do any parsing or complex stuff. They only read that hash and check for appropriate keys; that's it. It has to be as simple as that.

Anyway the end result is that *you* (in your gitweb auth subroutine) need not parse anything. It's all done for you and sitting in a nice clean perl hash :-)





