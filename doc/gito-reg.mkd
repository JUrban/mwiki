# assorted faqs, tips, and notes on gitolite

#### helping with gitweb

Although gitweb is a completely separate program, gitolite can do quite a
lot to help you manage gitweb access as well; once the initial setup is
complete, you can do it all from within the gitolite config file!

If you just want gitweb to show some repositories, see [gwd] for how to
specify which repos to show.  Other advanced uses are described here.

[gwd]: http://sitaramc.github.com/gitolite/doc/2-admin.html#gwd

<a name="_easier_to_link_gitweb_authorisation_with_gitolite"></a>

##### easier to link gitweb authorisation with gitolite

Over and above whether a repo is even *shown* by gitweb, you may want to
further restrict people, allowing them to view *only* those repos for which
they have been given read access by gitolite.

This requires that:

  * you have to have some sort of HTTP auth on your web server (out of my
    scope, sorry!)
  * the HTTP auth should use the same username (like "sitaram") as used in the
    gitolite config (for the corresponding user)

Normally a superuser sets up passwords for users using the "htpasswd" command,
but this is an administrative chore.

Robin Smidsr√∏d had the *great* idea that, since each user already has pubkey
access to `git@server`, this gives us a very neat way of using gitolite to let
the users *manage their own HTTP passwords*.  Here's how:

  * setup apache so that the htaccess file it looks for is owned by the "git"
    user
  * in the `~/.gitolite.rc` file, look for the variable `$HTPASSWD_FILE` and
    point it to this file
  * tell your users to type in `ssh git@server htpasswd` to set or change
    their HTTP passwords

Of course some other authentication method can be used (e.g. `mod_ldap`) as
long as the usernames match.

Gitweb allows you to specify a subroutine to decide on access.  We use that
feature and tie it to gitolite.  Configuration example can be found in
`contrib/gitweb/`.

<a name="_umask_setting"></a>

##### umask setting

Gitweb not able to read your repos?  You can change the umask for newly
created repos to something more relaxed -- see the `~/.gitolite.rc` file


##### admin defined commands

This requires the wildcards feature to be enabled, but is then an extremely
powerful feature.  See `doc/admin-defined-commands.mkd`.

<a name="_access_control_for_external_commands"></a>

##### access control for external commands

Gitolite now has a mechanism for allowing access control for arbitrary
external commands, as long as they are invoked via ssh and present a
server-side command that contains enough information to make an access control
decision.

Note that this is incompatible with giving people shell access as described in
`doc/ssh-troubleshooting.mkd` -- people who have shell access are not
subject to this mechanism (it wouldn't make sense to try and control someone
who has shell access anyway).

In general, external commands require changes in one or both the config files;
the sample files in `conf/` double as documentation, so you should look there
for examples and usage.

Commands implemented so far are:

  * rsync
  * svnserve (see next section for a brief description; this has been
    contributed by Simon and Vladimir)

<a name="_svnserve"></a>

###### svnserve

If you are transitioning from SVN to gitolite, and have a lot of users using
public-key authentication with SVN, this feature may be useful to you. Once
you migrate all users' public keys into gitolite, you can set the `$SVNSERVE`
variable in `~/.gitolite.rc` to tie `svnserve` with gitolite's authentication
system. Assuming you installed gitolite to the same user as the one you used
for SVN, SVN connectivity will be retained, and users will be able to use
both SVN and git using the same SSH configuration.

<a name="_design_choices"></a>

### design choices

<a name="_keeping_the_parser_and_the_access_control_separate"></a>

#### keeping the parser and the access control separate

There are two programs concerned with access control:

  * `gl-auth-command`, the program that is run via `~/.ssh/authorized_keys`;
    this decides whether git should even be allowed to run (basic R/W/no
    access).  (This one cannot decide on the branch-level access; it is not
    known at this point what branch is being accessed)
  * the update-hook on each repo, which decides the per-branch permissions

I have chosen to keep the relatively complex task of parsing the config file
out of them to keep them simpler (and faster).  So any changes to the config
have to be first "compiled", and the access control programs use this
"compiled" version of the config.  (The compile step also refreshes
`~/.ssh/authorized_keys`).

If you choose the "easy install" method, all this is quite transparent to you
anyway.  If you cannot use the easy install and must install manually, I have
clear instructions on how to set it up.

[repout]: http://sitaramc.github.com/gitolite/doc/report-output.html
[delegation]: http://sitaramc.github.com/gitolite/doc/delegation.html
[rmrepo]: http://sitaramc.github.com/gitolite/doc/admin-defined-commands.html#rmrepo


### MathWiki implementation

- gitolite runs as www-data - this means it has a ssh dir with keys
- bare repos are in /var/www/repositories (this could be changed to /home/www-data as in indefero)
- checked out repos are under /var/cache/mwiki/admin
- registration form take username password and public key (we just use the key now)
- list of registered users is stored in a separate file under /var/cache/mwiki/admin - users.conf
- users.conf is included into gitolite.conf automatically
- @all group in gitolite can read all repos, each user has his RW fast-forward permissions
- when a user registers, a clone of the current official repos is
  made in his (named after him) subdirectory in repositories and
  admin called mwiki
- gitweb knows about the user repos, and the wiki can list all users
  
  
#### limitations
- not yet hooks in the users repos
- no passwords for doing web-based operations, changing the ssh key, etc.
