# Fine dependencies and their implementation:

#### file-based model:

- get file-based deps using `envget` or `coqdep` (FILEDEP tool) into .d or .dep
- .d(ep) depend just on source files, get recompiled when the source files change
- nothing depends on the .d(ep) files, they are used automatically as Makefile includes
- this way, they dynamically change the compilation dependencies between the files

#### file-based model with section editing and fine dependency info:

- get items deps (.ideps) using .refx file in Mizar ( and Lionel's tools for Coq)
- .ideps are item dependecies, containing lines like:

        t1_article3 depends on t3_art2 and t8_art1
        t2_article3 depends on t8_art1 and t1_art3
     
- .ideps are updated whenever a source file changes
- now we have two options:
- 1.
   * .ideps are collectively compiled into .rideps (reverse deps), with lines like:
     t8_art1: t1_art3 t2_art3 (listing all items depending on a given item in art1)
   * from the appropriate line in .rideps we can fake new .dep files like:
     art3 : art1
- or 2. always just grep the ideps files
- we should hide all other .dep files when we do this, - but it is not enough, they will
  be autocreated by using the FILEDEP tool; so we can just make them empty (saving the 
  old ones); or we can compile using a different Makefile, which uses the empty dep files,
  and only changes the ones we need - this is better
- after we recompile in the section mode, we have to touch all file-based dependent files 
  recursively (using .dep files to guide this, or just touch all using mml.lar - needs tsort)

#### middle ground

- as above, but articles depend on theorems/schemes - .fdep
- we recompile whole articles, and touch things as above

details:

- a theorem T in article A gets edited - T.fdeps get updated
- we grep for T in other .fdeps, and touch the found .miz files (in the deps order) 
- we run make, not including the .dep files. We make the targets in th
  deps order for compatibility with the normal make. This should result
  in only compiling the .hdr .xmlvrf .fdeps -prel -absrefs.xml .html
  (only xmlvrf needs to be re-done now, the prel and html should stay
  the same)
- if we fail, we rsync/rollback, otherwise we have to touch all
  dependencies - done as the "touch-dependencies" target
- for touching all dependencies, we need to store the topological
  order each time the .dep files change - this is now done in the deps
  file (turned to file from a target) - pretty fast - 0.2s for whole MML
  

- when whole article A gets edited, we also update A.fdeps - done, as
  a dependency of -prel and depending on .xmlvrf (because .refx is
  needed) - TODO for Coq


#### Coq

- run coqc and ../paper/code/bin/coq_dump_depends -coqtop ./bin/CoRN-interface -in $< -out "$${OUT}" 
- CoRN-interface is a wrapper (adding -R and blahbla) around coq-interface which is coqtop compiled with pcoq and lionel's extensions
- which is in coq 8.3 make
- TODO: http://coq.inria.fr/bench/coqbench.cgi?version=v8.3
- .cleanfinedeps: "CoRN.algebra.Basics.Acc_inv" ("CoRN.algebra.Basics.Acc") (item deps)
